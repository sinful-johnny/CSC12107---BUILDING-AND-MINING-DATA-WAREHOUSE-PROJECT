-- Create Package Table
CREATE TABLE Package (
    package_id NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    package_name NVARCHAR2(255),
    description NVARCHAR2(255),
    schedule VARCHAR2(255)
);

-- Create Status Table
CREATE TABLE Status (
    status_id NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    status_name VARCHAR2(50)
);
-- select * from status;
-- Create Source Table
CREATE TABLE Source (
    source_id NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    source_name NVARCHAR2(255),
    source_file NVARCHAR2(255)
);

-- Create Data_Flows Table
CREATE TABLE Data_Flows (
    data_flow_id NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    data_flow_name NVARCHAR2(255),
    description NVARCHAR2(255),
    source_id NUMBER,
    transformation VARCHAR2(255),
    package_id NUMBER,
    status_id NUMBER,
    CET TIMESTAMP,
    LSET TIMESTAMP,
    CONSTRAINT FK_DataFlows_Source FOREIGN KEY (source_id) REFERENCES Source(source_id),
    CONSTRAINT FK_DataFlows_Status FOREIGN KEY (status_id) REFERENCES Status(status_id),
    CONSTRAINT FK_DataFlows_Package FOREIGN KEY (package_id) REFERENCES Package(package_id)
);

-- Create RuleType Table
CREATE TABLE RuleType (
    rule_type_id VARCHAR2(5) PRIMARY KEY,
    rule_type_name VARCHAR2(255)
);

-- Create RuleCatery Table
CREATE TABLE RuleCategory (
    rule_cat_id VARCHAR2(5) PRIMARY KEY,
    rule_cat_name VARCHAR2(255)
);

-- Create RuleRisk Table
CREATE TABLE RuleRisk (
    rule_risk_level NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    rule_risk_name VARCHAR2(255)
);

-- Create RuleStatus Table
CREATE TABLE RuleStatus (
    rule_status_id VARCHAR2(5) PRIMARY KEY,
    rule_status VARCHAR2(255)
);

-- Create RuleAction Table
CREATE TABLE RuleAction (
    rule_action_id VARCHAR2(5) PRIMARY KEY,
    rule_action VARCHAR2(255)
);

-- Create DQRules Table
CREATE TABLE DQRules (
    rule_id NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    rule_name VARCHAR2(255),
    description VARCHAR2(255),
    rule_type_id VARCHAR2(5) NOT NULL,
    rule_cat_id VARCHAR2(5) NOT NULL,
    rule_risk_level NUMBER,
    rule_status_id VARCHAR2(5),
    rule_action_id VARCHAR2(5),
    createdAt TIMESTAMP,
    updatedAt TIMESTAMP,
    CONSTRAINT FK_DQRules_RuleType FOREIGN KEY (rule_type_id) REFERENCES RuleType(rule_type_id),
    CONSTRAINT FK_DQRules_RuleCategory FOREIGN KEY (rule_cat_id) REFERENCES RuleCategory(rule_cat_id),
    CONSTRAINT FK_DQRules_RuleRisk FOREIGN KEY (rule_risk_level) REFERENCES RuleRisk(rule_risk_level),
    CONSTRAINT FK_DQRules_RuleStatus FOREIGN KEY (rule_status_id) REFERENCES RuleStatus(rule_status_id),
    CONSTRAINT FK_DQRules_RuleAction FOREIGN KEY (rule_action_id) REFERENCES RuleAction(rule_action_id)
);


-- Create DWUsers Table
CREATE TABLE DWUsers (
    user_id NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    user_name VARCHAR2(100),
    department VARCHAR2(100),
    role VARCHAR2(100),
    email_address VARCHAR2(100),
    phone_number VARCHAR2(20),
    group_id NUMBER,
    is_active NUMBER(1) DEFAULT 1,
    createdAt TIMESTAMP,
    updatedAt TIMESTAMP
);

-- Create DQNotification Table
CREATE TABLE DQNotification (
    noti_id NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    rule_id NUMBER NOT NULL,
    user_id NUMBER NOT NULL,
    noti_type VARCHAR2(50),
    is_active NUMBER(1) DEFAULT 1,
    createdAt TIMESTAMP,
    updatedAt TIMESTAMP,
    CONSTRAINT FK_DQNotification_DQRules FOREIGN KEY (rule_id) REFERENCES DQRules(rule_id),
    CONSTRAINT FK_DQNotification_DWUsers FOREIGN KEY (user_id) REFERENCES DWUsers(user_id)
);

INSERT INTO Source(source_name, source_file) VALUES ('LopHocCsv', 'LopHoc.csv');
INSERT INTO Source(source_name, source_file) VALUES ('HocSinhCsv', 'HocSinh.csv');
INSERT INTO Source(source_name, source_file) VALUES ('MonHocCsv', 'MonHoc.csv');
INSERT INTO Source(source_name, source_file) VALUES ('DiemCsv', 'Diem.csv');

INSERT INTO Source(source_name, source_file) VALUES ('Stage_LopHoc', 'QLLopHoc_Stage.Stage_LopHoc');
INSERT INTO Source(source_name, source_file) VALUES ('[Stage_Học_sinh]', 'QLLopHoc_Stage.[Stage_Học_sinh]');
INSERT INTO Source(source_name, source_file) VALUES ('Stage_MonHoc', 'QLLopHoc_Stage.Stage_MonHoc');
INSERT INTO Source(source_name, source_file) VALUES ('Stage_Diem', 'QLLopHoc_Stage.Stage_Diem');

INSERT INTO Source(source_name, source_file) VALUES ('LopHoc_NDS', 'QLLopHoc_NDS.LopHoc_NDS');
INSERT INTO Source(source_name, source_file) VALUES ('HocSinh_NDS', 'QLLopHoc_NDS.HocSinh_NDS');
INSERT INTO Source(source_name, source_file) VALUES ('MonHoc_NDS', 'QLLopHoc_NDS.MonHoc_NDS');
INSERT INTO Source(source_name, source_file) VALUES ('Diem_NDS', 'QLLopHoc_NDS.Diem_NDS');




INSERT INTO Status(status_name) VALUES ('Unknown');
INSERT INTO Status(status_name) VALUES ('Success');
INSERT INTO Status(status_name) VALUES ('Failed');
INSERT INTO Status(status_name) VALUES ('In progress');

INSERT INTO Package(package_name, description) 
VALUES ('StageLevelPackage', 'ETL Source to Stage');

INSERT INTO Package(package_name, description) 
VALUES ('StageToNDS', 'ETL Stage to NDS');

INSERT INTO Package(package_name, description) 
VALUES ('NDSToDDS', 'ETL NDS to DDS');

INSERT INTO data_flows (data_flow_name, description, CET, LSET, status_id, source_id, package_id)
VALUES
('csv to Stage_LopHoc', '', TO_DATE('1753-01-01 00:00:00', 'YYYY-MM-DD HH24:MI:SS'), TO_DATE('1753-01-01 00:00:00', 'YYYY-MM-DD HH24:MI:SS'), 1, 
  (SELECT source_id FROM Source WHERE source_name = 'LopHocCsv' FETCH FIRST 1 ROWS ONLY), 
  (SELECT package_id FROM Package WHERE package_name = 'StageLevelPackage' FETCH FIRST 1 ROWS ONLY));
INSERT INTO data_flows (data_flow_name, description, CET, LSET, status_id, source_id, package_id)
VALUES
(N'csv to Stage_Học_Sinh', '', TO_DATE('1753-01-01 00:00:00', 'YYYY-MM-DD HH24:MI:SS'), TO_DATE('1753-01-01 00:00:00', 'YYYY-MM-DD HH24:MI:SS'), 1, 
  (SELECT source_id FROM Source WHERE source_name = 'HocSinhCsv' FETCH FIRST 1 ROWS ONLY), 
  (SELECT package_id FROM Package WHERE package_name = 'StageLevelPackage' FETCH FIRST 1 ROWS ONLY));
INSERT INTO data_flows (data_flow_name, description, CET, LSET, status_id, source_id, package_id)
VALUES
('csv to Stage_MonHoc', '', TO_DATE('1753-01-01 00:00:00', 'YYYY-MM-DD HH24:MI:SS'), TO_DATE('1753-01-01 00:00:00', 'YYYY-MM-DD HH24:MI:SS'), 1, 
  (SELECT source_id FROM Source WHERE source_name = 'MonHocCsv' FETCH FIRST 1 ROWS ONLY), 
  (SELECT package_id FROM Package WHERE package_name = 'StageLevelPackage' FETCH FIRST 1 ROWS ONLY));
INSERT INTO data_flows (data_flow_name, description, CET, LSET, status_id, source_id, package_id)
VALUES
('csv to Stage_Diem', '', TO_DATE('1753-01-01 00:00:00', 'YYYY-MM-DD HH24:MI:SS'), TO_DATE('1753-01-01 00:00:00', 'YYYY-MM-DD HH24:MI:SS'), 1, 
  (SELECT source_id FROM Source WHERE source_name = 'DiemCsv' FETCH FIRST 1 ROWS ONLY), 
  (SELECT package_id FROM Package WHERE package_name = 'ETL_Source_Stage' FETCH FIRST 1 ROWS ONLY));
INSERT INTO data_flows (data_flow_name, description, CET, LSET, status_id, source_id, package_id)
VALUES
('Stage_LopHoc to LopHoc_NDS', '', TO_DATE('1753-01-01 00:00:00', 'YYYY-MM-DD HH24:MI:SS'), TO_DATE('1753-01-01 00:00:00', 'YYYY-MM-DD HH24:MI:SS'), 1, 
  (SELECT source_id FROM Source WHERE source_name = 'Stage_LopHoc' FETCH FIRST 1 ROWS ONLY), 
  (SELECT package_id FROM Package WHERE package_name = 'StageToNDS' FETCH FIRST 1 ROWS ONLY));
INSERT INTO data_flows (data_flow_name, description, CET, LSET, status_id, source_id, package_id)
VALUES
(N'Stage_Học_Sinh to HocSinh_NDS', '', TO_DATE('1753-01-01 00:00:00', 'YYYY-MM-DD HH24:MI:SS'), TO_DATE('1753-01-01 00:00:00', 'YYYY-MM-DD HH24:MI:SS'), 1, 
  (SELECT source_id FROM Source WHERE source_name = N'[Stage_Học_sinh]' FETCH FIRST 1 ROWS ONLY), 
  (SELECT package_id FROM Package WHERE package_name = 'StageToNDS' FETCH FIRST 1 ROWS ONLY));
INSERT INTO data_flows (data_flow_name, description, CET, LSET, status_id, source_id, package_id)
VALUES
('Stage_MonHoc to MonHoc_NDS', '', TO_DATE('1753-01-01 00:00:00', 'YYYY-MM-DD HH24:MI:SS'), TO_DATE('1753-01-01 00:00:00', 'YYYY-MM-DD HH24:MI:SS'), 1, 
  (SELECT source_id FROM Source WHERE source_name = 'Stage_MonHoc' FETCH FIRST 1 ROWS ONLY), 
  (SELECT package_id FROM Package WHERE package_name = 'StageToNDS' FETCH FIRST 1 ROWS ONLY));
INSERT INTO data_flows (data_flow_name, description, CET, LSET, status_id, source_id, package_id)
VALUES
('Stage_Diem to Diem_NDS', '', TO_DATE('1753-01-01 00:00:00', 'YYYY-MM-DD HH24:MI:SS'), TO_DATE('1753-01-01 00:00:00', 'YYYY-MM-DD HH24:MI:SS'), 1, 
  (SELECT source_id FROM Source WHERE source_name = 'Stage_Diem' FETCH FIRST 1 ROWS ONLY), 
  (SELECT package_id FROM Package WHERE package_name = 'StageToNDS' FETCH FIRST 1 ROWS ONLY));
INSERT INTO data_flows (data_flow_name, description, CET, LSET, status_id, source_id, package_id)
VALUES
('ETL NDS to DIM_LOPHOC', '', TO_DATE('1753-01-01 00:00:00', 'YYYY-MM-DD HH24:MI:SS'), TO_DATE('1753-01-01 00:00:00', 'YYYY-MM-DD HH24:MI:SS'), 1, 
  (SELECT source_id FROM Source WHERE source_name = 'LopHoc_NDS' FETCH FIRST 1 ROWS ONLY), 
  (SELECT package_id FROM Package WHERE package_name = 'NDSToDDS' FETCH FIRST 1 ROWS ONLY));
INSERT INTO data_flows (data_flow_name, description, CET, LSET, status_id, source_id, package_id)
VALUES
('ETL NDS to DIM_HOCSINH', '', TO_DATE('1753-01-01 00:00:00', 'YYYY-MM-DD HH24:MI:SS'), TO_DATE('1753-01-01 00:00:00', 'YYYY-MM-DD HH24:MI:SS'), 1, 
  (SELECT source_id FROM Source WHERE source_name = 'HocSinh_NDS' FETCH FIRST 1 ROWS ONLY), 
  (SELECT package_id FROM Package WHERE package_name = 'NDSToDDS' FETCH FIRST 1 ROWS ONLY));
INSERT INTO data_flows (data_flow_name, description, CET, LSET, status_id, source_id, package_id)
VALUES
('ETL NDS to DIM_MONHOC', '', TO_DATE('1753-01-01 00:00:00', 'YYYY-MM-DD HH24:MI:SS'), TO_DATE('1753-01-01 00:00:00', 'YYYY-MM-DD HH24:MI:SS'), 1, 
  (SELECT source_id FROM Source WHERE source_name = 'MonHoc_NDS' FETCH FIRST 1 ROWS ONLY), 
  (SELECT package_id FROM Package WHERE package_name = 'NDSToDDS' FETCH FIRST 1 ROWS ONLY));
INSERT INTO data_flows (data_flow_name, description, CET, LSET, status_id, source_id, package_id)
VALUES
('ETL NDS to FACT_THONGKE', '', TO_DATE('1753-01-01 00:00:00', 'YYYY-MM-DD HH24:MI:SS'), TO_DATE('1753-01-01 00:00:00', 'YYYY-MM-DD HH24:MI:SS'), 1, 
  (SELECT source_id FROM Source WHERE source_name = 'Diem_NDS' FETCH FIRST 1 ROWS ONLY), 
  (SELECT package_id FROM Package WHERE package_name = 'NDSToDDS' FETCH FIRST 1 ROWS ONLY));


INSERT ALL
  INTO RuleType (rule_type_id, rule_type_name) VALUES ('RT01', 'Referential Integrity')
  INTO RuleType (rule_type_id, rule_type_name) VALUES ('RT02', 'Duplicate Data Check')
  INTO RuleType (rule_type_id, rule_type_name) VALUES ('RT03', 'Range Check')
  INTO RuleType (rule_type_id, rule_type_name) VALUES ('RT04', 'Null Value Check')
  INTO RuleType (rule_type_id, rule_type_name) VALUES ('RT05', 'Aggregation Validation')
  INTO RuleType (rule_type_id, rule_type_name) VALUES ('RT06', 'Consistency Check')
SELECT * FROM dual;

INSERT ALL
  INTO RuleCategory (rule_cat_id, rule_cat_name) VALUES ('RC01', 'Mapping Validation')
  INTO RuleCategory (rule_cat_id, rule_cat_name) VALUES ('RC02', 'Data Completeness')
  INTO RuleCategory (rule_cat_id, rule_cat_name) VALUES ('RC03', 'Range Validation')
  INTO RuleCategory (rule_cat_id, rule_cat_name) VALUES ('RC04', 'Consistency Validation')
SELECT * FROM dual;

INSERT INTO RuleRisk (rule_risk_name)
SELECT 'Low' FROM dual WHERE NOT EXISTS (SELECT 1 FROM RuleRisk WHERE rule_risk_name = 'Low')
UNION ALL
SELECT 'Medium' FROM dual WHERE NOT EXISTS (SELECT 1 FROM RuleRisk WHERE rule_risk_name = 'Medium')
UNION ALL
SELECT 'High' FROM dual WHERE NOT EXISTS (SELECT 1 FROM RuleRisk WHERE rule_risk_name = 'High')
UNION ALL
SELECT 'Critical' FROM dual WHERE NOT EXISTS (SELECT 1 FROM RuleRisk WHERE rule_risk_name = 'Critical')
UNION ALL
SELECT 'Catastrophic' FROM dual WHERE NOT EXISTS (SELECT 1 FROM RuleRisk WHERE rule_risk_name = 'Catastrophic');

INSERT INTO RuleStatus (rule_status_id, rule_status) VALUES ('A', 'Active');
INSERT INTO RuleStatus (rule_status_id, rule_status) VALUES ('D', 'Decommissioned');

INSERT ALL
  INTO RuleAction (rule_action_id, rule_action) VALUES ('R', 'Reject')
  INTO RuleAction (rule_action_id, rule_action) VALUES ('A', 'Allow')
  INTO RuleAction (rule_action_id, rule_action) VALUES ('F', 'Fix')
SELECT * FROM dual;

INSERT INTO DQRules (rule_name, description, rule_type_id, rule_cat_id, rule_risk_level, rule_status_id, rule_action_id, createdAt, updatedAt)
VALUES ('Validate Student-Class Mapping', 'Ensure malop in HocSinh exists in LopHoc.', 'RT01', 'RC01', 3, 'A', 'R', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP);

INSERT INTO DQRules (rule_name, description, rule_type_id, rule_cat_id, rule_risk_level, rule_status_id, rule_action_id, createdAt, updatedAt)
VALUES ('Check Duplicate Students', 'Ensure no duplicate MaHS in nHocSinh.', 'RT02', 'RC02', 4, 'A', 'F', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP);

INSERT INTO DQRules (rule_name, description, rule_type_id, rule_cat_id, rule_risk_level, rule_status_id, rule_action_id, createdAt, updatedAt)
VALUES ('Validate Score Range', 'Ensure Diem in Diem table is between 0 and 10.', 'RT03', 'RC03', 5, 'A', 'R', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP);

INSERT INTO DQRules (rule_name, description, rule_type_id, rule_cat_id, rule_risk_level, rule_status_id, rule_action_id, createdAt, updatedAt)
VALUES ('Validate Non-Null Student Attributes', 'Ensure HoTen, NgaySinh, and GioiTinh in HocSinh are not null.', 'RT04', 'RC02', 4, 'A', 'R', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP);

INSERT INTO DQRules (rule_name, description, rule_type_id, rule_cat_id, rule_risk_level, rule_status_id, rule_action_id, createdAt, updatedAt)
VALUES ('Validate Class Size', 'Check if siso in LopHoc_NDS matches the number of students in the class.', 'RT05', 'RC04', 3, 'A', 'F', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP);

INSERT INTO DQRules (rule_name, description, rule_type_id, rule_cat_id, rule_risk_level, rule_status_id, rule_action_id, createdAt, updatedAt)
VALUES ('Check Course Credit Consistency', 'Ensure SoTC in MonHoc_NDS is consistent across records.', 'RT06', 'RC04', 2, 'A', 'F', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP);

INSERT INTO DQRules (rule_name, description, rule_type_id, rule_cat_id, rule_risk_level, rule_status_id, rule_action_id, createdAt, updatedAt)
VALUES ('Validate Course-Student Mapping', 'Ensure MaMH in Diem exists in MonHoc.', 'RT01', 'RC01', 3, 'A', 'R', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP);

INSERT INTO DQRules (rule_name, description, rule_type_id, rule_cat_id, rule_risk_level, rule_status_id, rule_action_id, createdAt, updatedAt)
VALUES ('Ensure Class Attributes are Not Null', 'Verify that attributes in LopHoc_NDS are non-null.', 'RT04', 'RC02', 4, 'A', 'R', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP);

INSERT INTO DQRules (rule_name, description, rule_type_id, rule_cat_id, rule_risk_level, rule_status_id, rule_action_id, createdAt, updatedAt)
VALUES ('Check Duplicate Classes', 'Ensure no duplicate MaLop in LopHoc.', 'RT02', 'RC02', 3, 'A', 'F', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP);

INSERT INTO DQRules (rule_name, description, rule_type_id, rule_cat_id, rule_risk_level, rule_status_id, rule_action_id, createdAt, updatedAt)
VALUES ('Validate Class Capacity', 'Ensure siso in LopHoc_NDS is between 10 and 50.', 'RT03', 'RC03', 5, 'A', 'R', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP);

INSERT INTO DQRules (rule_name, description, rule_type_id, rule_cat_id, rule_risk_level, rule_status_id, rule_action_id, createdAt, updatedAt)
VALUES ('Validate format of MaHS', 'MaHS must be in "HS[0-9][0-9]" format.', 'RT03', 'RC03', 5, 'A', 'R', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP);

INSERT INTO DQRules (rule_name, description, rule_type_id, rule_cat_id, rule_risk_level, rule_status_id, rule_action_id, createdAt, updatedAt)
VALUES ('Diem in range [0, 10]', 'Diem so has to be >= 0 and <= 10', 'RT05', 'RC03', 3, 'A', 'F', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP);

INSERT INTO DQRules (rule_name, description, rule_type_id, rule_cat_id, rule_risk_level, rule_status_id, rule_action_id, createdAt, updatedAt)
VALUES ('Validate Student-Class-Diem Mapping', 'Ensure mahocsinh, malop in Diem exists in LopHoc, HocSinh.', 'RT01', 'RC01', 3, 'A', 'R', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP);

-- Insert data into DWUsers
-- Insert first row into DWUsers
INSERT INTO DWUsers (user_name, department, role, email_address, phone_number, group_id, is_active, createdAt, updatedAt)
VALUES ('John Smith', 'IT', 'Data Engineer', 'john.smith@example.com', '123-456-7890', 1, 1, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP);

-- Insert second row into DWUsers
INSERT INTO DWUsers (user_name, department, role, email_address, phone_number, group_id, is_active, createdAt, updatedAt)
VALUES ('Jane Doe', 'Analytics', 'Analyst', 'jane.doe@example.com', '987-654-3210', 2, 1, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP);

-- Insert third row into DWUsers
INSERT INTO DWUsers (user_name, department, role, email_address, phone_number, group_id, is_active, createdAt, updatedAt)
VALUES ('Alice Johnson', 'Quality Assurance', 'QA Specialist', 'alice.johnson@example.com', '555-123-4567', 3, 1, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP);

-- Insert data into DQNotification
-- Insert first row into DQNotification
INSERT INTO DQNotification (rule_id, user_id, noti_type, is_active, createdAt, updatedAt)
VALUES (1, 1, 'Email', 1, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP);

-- Insert second row into DQNotification
INSERT INTO DQNotification (rule_id, user_id, noti_type, is_active, createdAt, updatedAt)
VALUES (4, 2, 'SMS', 1, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP);

-- Insert third row into DQNotification
INSERT INTO DQNotification (rule_id, user_id, noti_type, is_active, createdAt, updatedAt)
VALUES (6, 3, 'Email', 1, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP);



-- DROP TABLE DQRules CASCADE CONSTRAINTS;

-- select * from DQRules;
-- SELECT rule_risk_name
-- FROM RuleRisk
-- WHERE rule_risk_name IN ('Low', 'Medium', 'High', 'Critical', 'Catastrophic');

-- select * from odi_dba.RuleType;
-- select * from odi_dba.RuleCategory;
-- select * from RuleRisk;
-- select * from RuleStatus;
-- select * from RuleAction;

-- SELECT table_name
-- FROM all_tables
-- WHERE owner = 'odi_dba';

-- SELECT rule_name, COUNT(*)
-- FROM DQRules
-- GROUP BY rule_name
-- HAVING COUNT(*) > 1;

-- SELECT constraint_name, column_name
-- FROM all_cons_columns
-- WHERE table_name = 'DQRules' AND constraint_name IN (
--     SELECT constraint_name
--     FROM all_constraints
--     WHERE table_name = 'DQRules' AND constraint_type = 'U'
-- );
-- SELECT *
-- FROM DQRules
-- WHERE rule_name IN ('Check Duplicate Students', 'Validate Score Range', 'Validate Non-Null Student Attributes', 'Validate Class Size', 'Check Course Credit Consistency', 'Validate Course-Student Mapping', 'Ensure Class Attributes are Not Null', 'Check Duplicate Classes', 'Validate Class Capacity', 'Validate format of MaHS', 'Diem in range [0, 10]', 'Validate Student-Class-Diem Mapping');

